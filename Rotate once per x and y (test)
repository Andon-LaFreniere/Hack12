#include <AccelStepper.h>

// Define stepper motor connections and motor interface type
#define MOTOR_INTERFACE_TYPE 1  // Using Step and Direction pins

// Motor pins for X-axis
const int stepPinX = 3;
const int dirPinX = 4;

// Motor pins for Y-axis
const int stepPinY = 5;
const int dirPinY = 6;

// Create AccelStepper instances for X and Y axes
AccelStepper stepperX(MOTOR_INTERFACE_TYPE, stepPinX, dirPinX);
AccelStepper stepperY(MOTOR_INTERFACE_TYPE, stepPinY, dirPinY);

// Set the number of steps per revolution based on your microstepping setting
// For 1/16 microstepping: 200 steps * 16 = 3200 steps/rev
const long stepsPerRev_X = 3200;  // Adjust if using different microstepping
const long stepsPerRev_Y = 3200;  // Adjust if using different microstepping

// Flag to indicate if a move is in progress
bool isMoving = false;

void setup() {
  // Initialize serial communication for debugging
  Serial.begin(9600);
  while (!Serial) {
    ; // Wait for serial port to connect. Needed for native USB
  }
  Serial.println("Arduino Ready. Starting rotation...");

  // Configure steppers
  stepperX.setMaxSpeed(1000);      // Steps per second
  stepperX.setAcceleration(500);   // Steps per second^2

  stepperY.setMaxSpeed(1000);
  stepperY.setAcceleration(500);

  // Set initial positions to zero
  stepperX.setCurrentPosition(0);
  stepperY.setCurrentPosition(0);

  // Define target positions for one full revolution
  stepperX.moveTo(stepsPerRev_X);
  stepperY.moveTo(stepsPerRev_Y);

  isMoving = true;
}

void loop() {
  if (isMoving) {
    // Run both steppers
    bool stepperXRunning = stepperX.run();
    bool stepperYRunning = stepperY.run();

    // Check if both steppers have reached their targets
    if (!stepperXRunning && !stepperYRunning) {
      isMoving = false;
      Serial.println("Both motors have completed one full revolution.");
      
      // Optionally, stop the program or reset for another move
      // For demonstration, we'll halt here
      while (1) {
        ; // Do nothing, effectively stopping the loop
      }
    }
  }
}

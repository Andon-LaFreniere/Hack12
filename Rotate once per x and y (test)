import serial
import time

# --- Configuration ---

# Set the serial port to COM5
arduino_port = 'COM5'  # Change this if your Arduino is connected to a different port
baud_rate = 9600       # Must match the Arduino's baud rate

# Number of steps for one full revolution
steps_per_rev_X = 200  # X-axis steps per revolution
steps_per_rev_Y = 200  # Y-axis steps per revolution

# Initialize serial connection
try:
    ser = serial.Serial(arduino_port, baud_rate, timeout=1)
    print(f"Connected to Arduino on port {arduino_port} at {baud_rate} baud.")
except serial.SerialException as e:
    print(f"Error: Could not open serial port {arduino_port}: {e}")
    exit()

# Allow some time for the connection to establish
time.sleep(2)

# --- Function to Send ROTATE Command ---

def rotate_motors(steps_x, steps_y):
    """
    Sends a ROTATE command to the Arduino to rotate the X and Y motors.

    Parameters:
    steps_x (int): Number of steps to rotate the X-axis motor.
    steps_y (int): Number of steps to rotate the Y-axis motor.
    """
    command = f"ROTATE {steps_x},{steps_y}\n"
    ser.write(command.encode())
    print(f"Sent command: {command.strip()}")

# --- Function to Read Arduino Response ---

def read_response():
    """
    Reads and prints all available responses from the Arduino.
    """
    while ser.in_waiting > 0:
        response = ser.readline().decode('utf-8').strip()
        if response:
            print(f"Arduino: {response}")

# --- Main Execution ---

try:
    # Optionally, read initial position
    print("Requesting initial positions...")
    ser.write(b'READ\n')
    time.sleep(0.5)  # Wait for Arduino to respond
    read_response()

    # Rotate both motors by one full revolution (200 steps each)
    print("\nRotating both X and Y motors by one full revolution (200 steps each).")
    rotate_motors(steps_per_rev_X, steps_per_rev_Y)

    # Allow time for motors to complete rotation
    time.sleep(3)  # Adjust based on your system's speed

    # Read updated positions
    print("\nRequesting updated positions...")
    ser.write(b'READ\n')
    time.sleep(0.5)
    read_response()

except KeyboardInterrupt:
    print("\nInterrupted by user.")

finally:
    ser.close()
    print("Serial connection closed.")

#include <AccelStepper.h>

// Define stepper motor connections and motor interface type
#define MOTOR_INTERFACE_TYPE 1  // Using step and direction pins

// Motor pins for X-axis
const int stepPinX = 3;
const int dirPinX = 4;

// Motor pins for Y-axis
const int stepPinY = 5;
const int dirPinY = 6;

// Create AccelStepper instances for X and Y axes
AccelStepper stepperX(MOTOR_INTERFACE_TYPE, stepPinX, dirPinX);
AccelStepper stepperY(MOTOR_INTERFACE_TYPE, stepPinY, dirPinY);

// Set the number of steps per revolution for your motor based on microstepping
// If you're using 1/16 microstepping (commonly with A4988/DRV8825), this would be 3200 steps per revolution
const long stepsPerRev = 3200;  // Adjust based on your microstepping setting

void setup() {
  // Initialize serial communication (optional, for debugging)
  Serial.begin(9600);
  
  // Set maximum speed and acceleration
  stepperX.setMaxSpeed(1000);    // Steps per second
  stepperX.setAcceleration(500); // Steps per second^2
  
  stepperY.setMaxSpeed(1000);
  stepperY.setAcceleration(500);
}

void loop() {
  // Rotate X motor one full revolution
  Serial.println("Rotating X motor one full revolution...");
  stepperX.moveTo(stepperX.currentPosition() + stepsPerRev);
  while (stepperX.distanceToGo() != 0) {
    stepperX.run();
  }
  
  // Delay before rotating Y motor
  delay(1000);
  
  // Rotate Y motor one full revolution
  Serial.println("Rotating Y motor one full revolution...");
  stepperY.moveTo(stepperY.currentPosition() + stepsPerRev);
  while (stepperY.distanceToGo() != 0) {
    stepperY.run();
  }
  
  // Delay before restarting loop
  delay(2000);
}

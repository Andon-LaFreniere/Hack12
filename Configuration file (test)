#include <AccelStepper.h>

// Defines pins for X and Y axes
const int stepPinX = 3;
const int dirPinX = 4;

const int stepPinY = 5;
const int dirPinY = 6;

// Stepper motor setup for X and Y axes
AccelStepper stepperX(AccelStepper::DRIVER, stepPinX, dirPinX);
AccelStepper stepperY(AccelStepper::DRIVER, stepPinY, dirPinY);

// Initial steps per millimeter for X and Y axes
float stepsPerMM_X = 1600.0;
float stepsPerMM_Y = 1600.0;

void setup() {
  Serial.begin(9600);
  
  // Set up the stepper motors' max speed and acceleration
  stepperX.setMaxSpeed(3000);  
  stepperX.setAcceleration(1000);  
  
  stepperY.setMaxSpeed(3000);  
  stepperY.setAcceleration(1000);  
  
  Serial.println("Calibration Mode: X and Y Axes");
  Serial.println("Enter 'CALIBRATE X <steps>' or 'CALIBRATE Y <steps>' to move the motors.");
  Serial.println("After measurement, enter 'SET_STEPS_PER_MM X <value>' or 'SET_STEPS_PER_MM Y <value>' to update the calibration.");
}

void loop() {
  if (Serial.available() > 0) {
    String input = Serial.readStringUntil('\n');
    input.trim();
    
    // Handle CALIBRATE command for X
    if (input.startsWith("CALIBRATE X")) {
      long steps = input.substring(11).toInt();
      Serial.print("Moving X-axis by ");
      Serial.print(steps);
      Serial.println(" steps.");
      moveStepperX(steps);
    }
    
    // Handle CALIBRATE command for Y
    else if (input.startsWith("CALIBRATE Y")) {
      long steps = input.substring(11).toInt();
      Serial.print("Moving Y-axis by ");
      Serial.print(steps);
      Serial.println(" steps.");
      moveStepperY(steps);
    }
    
    // Handle SET_STEPS_PER_MM command for X
    else if (input.startsWith("SET_STEPS_PER_MM X")) {
      stepsPerMM_X = input.substring(18).toFloat();
      Serial.print("Updated stepsPerMM_X to: ");
      Serial.println(stepsPerMM_X);
    }
    
    // Handle SET_STEPS_PER_MM command for Y
    else if (input.startsWith("SET_STEPS_PER_MM Y")) {
      stepsPerMM_Y = input.substring(18).toFloat();
      Serial.print("Updated stepsPerMM_Y to: ");
      Serial.println(stepsPerMM_Y);
    }
  }

  // Only run stepper if there are steps to move
  if (stepperX.distanceToGo() != 0) {
    stepperX.run();  // Continuously run X-axis stepper motor
  }

  if (stepperY.distanceToGo() != 0) {
    stepperY.run();  // Continuously run Y-axis stepper motor
  }
}

// Function to move the X-axis by a specific number of steps
void moveStepperX(long steps) {
  stepperX.move(steps);
  while (stepperX.distanceToGo() != 0) {
    stepperX.run();
  }
  sendPositionX();
}

// Function to move the Y-axis by a specific number of steps
void moveStepperY(long steps) {
  stepperY.move(steps);
  while (stepperY.distanceToGo() != 0) {
    stepperY.run();
  }
  sendPositionY();
}

// Function to report the current position of the X-axis in millimeters
void sendPositionX() {
  float x_mm = stepperX.currentPosition() / stepsPerMM_X;
  Serial.print("Current X position: ");
  Serial.print(x_mm, 3);  // Display in millimeters with 3 decimal places
  Serial.println(" mm");
}

// Function to report the current position of the Y-axis in millimeters
void sendPositionY() {
  float y_mm = stepperY.currentPosition() / stepsPerMM_Y;
  Serial.print("Current Y position: ");
  Serial.print(y_mm, 3);  // Display in millimeters with 3 decimal places
  Serial.println(" mm");
}

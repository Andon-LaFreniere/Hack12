#include <AccelStepper.h>

// Defines pins for the X-axis
const int stepPinX = 3;
const int dirPinX = 4;

// Stepper motor setup for X-axis
AccelStepper stepperX(AccelStepper::DRIVER, stepPinX, dirPinX);

// Initial steps per millimeter for X-axis (starting with 1600 steps)
float stepsPerMM_X = 1600.0;  // Adjust this after calibration

void setup() {
  Serial.begin(9600);
  
  // Set up the stepper motor's max speed and acceleration
  stepperX.setMaxSpeed(3000);  // Max speed in steps per second
  stepperX.setAcceleration(1000);  // Acceleration in steps per second squared
  
  Serial.println("Calibration Mode: X-Axis");
  Serial.println("Enter 'CALIBRATE X <steps>' to move the motor by a number of steps.");
  Serial.println("After measurement, enter 'SET_STEPS_PER_MM X <value>' to update the calibration.");
}

void loop() {
  if (Serial.available() > 0) {
    String input = Serial.readStringUntil('\n');
    input.trim();
    
    // Handle CALIBRATE command
    if (input.startsWith("CALIBRATE X")) {
      long steps = input.substring(11).toInt();
      Serial.print("Moving X-axis by ");
      Serial.print(steps);
      Serial.println(" steps.");
      moveStepperX(steps);
    }
    
    // Handle SET_STEPS_PER_MM command
    else if (input.startsWith("SET_STEPS_PER_MM X")) {
      stepsPerMM_X = input.substring(18).toFloat();
      Serial.print("Updated stepsPerMM_X to: ");
      Serial.println(stepsPerMM_X);
    }
  }
  
  stepperX.run();  // Continuously run the stepper motor
}

// Function to move the X-axis by a specific number of steps
void moveStepperX(long steps) {
  stepperX.move(steps);
  while (stepperX.distanceToGo() != 0) {
    stepperX.run();
  }
  sendPositionX();
}

// Function to report the current position in millimeters
void sendPositionX() {
  float x_mm = stepperX.currentPosition() / stepsPerMM_X;
  Serial.print("Current X position: ");
  Serial.print(x_mm, 3);  // Display in millimeters with 3 decimal places
  Serial.println(" mm");
} //x test
